/* DataQLParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. DataQLParserTokenManager.java */
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.hasor.dataql.domain.parser;
/** Token Manager. */
@SuppressWarnings("unused")
public class DataQLParserTokenManager implements DataQLParserConstants {
    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;
    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }
    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
        case 0:
            if ((active0 & 0x202000000000000L) != 0L || (active1 & 0x1L) != 0L)
                return 2;
            if ((active0 & 0x600000000000L) != 0L || (active1 & 0x800L) != 0L)
                return 49;
            if ((active0 & 0x3ffe0000L) != 0L) {
                jjmatchedKind = 74;
                return 50;
            }
            if ((active0 & 0x1000000000000L) != 0L)
                return 26;
            if ((active0 & 0x800000000L) != 0L)
                return 15;
            if ((active0 & 0x1000000000L) != 0L)
                return 13;
            return -1;
        case 1:
            if ((active0 & 0x3ffc0000L) != 0L) {
                if (jjmatchedPos != 1) {
                    jjmatchedKind = 74;
                    jjmatchedPos = 1;
                }
                return 50;
            }
            if ((active0 & 0x20000L) != 0L)
                return 50;
            return -1;
        case 2:
            if ((active0 & 0x3eec0000L) != 0L) {
                jjmatchedKind = 74;
                jjmatchedPos = 2;
                return 50;
            }
            if ((active0 & 0x1100000L) != 0L)
                return 50;
            return -1;
        case 3:
            if ((active0 & 0x2a600000L) != 0L) {
                if (jjmatchedPos != 3) {
                    jjmatchedKind = 74;
                    jjmatchedPos = 3;
                }
                return 50;
            }
            if ((active0 & 0x148c0000L) != 0L)
                return 50;
            return -1;
        case 4:
            if ((active0 & 0x8400000L) != 0L)
                return 50;
            if ((active0 & 0x22240000L) != 0L) {
                jjmatchedKind = 74;
                jjmatchedPos = 4;
                return 50;
            }
            return -1;
        default:
            return -1;
        }
    }
    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }
    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }
    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 10:
            return jjStopAtPos(0, 3);
        case 12:
            return jjStopAtPos(0, 5);
        case 13:
            return jjStopAtPos(0, 4);
        case 33:
            jjmatchedKind = 44;
            return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
        case 34:
            return jjStartNfaWithStates_0(0, 36, 13);
        case 37:
            return jjStartNfaWithStates_0(0, 49, 2);
        case 38:
            jjmatchedKind = 57;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
        case 39:
            return jjStartNfaWithStates_0(0, 35, 15);
        case 40:
            return jjStopAtPos(0, 37);
        case 41:
            return jjStopAtPos(0, 38);
        case 42:
            return jjStopAtPos(0, 47);
        case 43:
            return jjStartNfaWithStates_0(0, 45, 49);
        case 44:
            return jjStopAtPos(0, 30);
        case 45:
            jjmatchedKind = 46;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
        case 47:
            return jjStartNfaWithStates_0(0, 48, 26);
        case 58:
            return jjStopAtPos(0, 31);
        case 59:
            return jjStopAtPos(0, 33);
        case 60:
            jjmatchedKind = 53;
            return jjMoveStringLiteralDfa1_0(0x1040000000000000L, 0x0L);
        case 61:
            jjmatchedKind = 34;
            return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
        case 62:
            jjmatchedKind = 51;
            return jjMoveStringLiteralDfa1_0(0x6010000000000000L, 0x0L);
        case 63:
            return jjStopAtPos(0, 32);
        case 91:
            return jjStopAtPos(0, 39);
        case 92:
            return jjStopAtPos(0, 50);
        case 93:
            return jjStopAtPos(0, 40);
        case 94:
            return jjStopAtPos(0, 59);
        case 101:
            return jjMoveStringLiteralDfa1_0(0x9c0000L, 0x0L);
        case 102:
            return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
        case 105:
            return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
        case 108:
            return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
        case 110:
            return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
        case 111:
            return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
        case 114:
            return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
        case 116:
            return jjMoveStringLiteralDfa1_0(0x4400000L, 0x0L);
        case 118:
            return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
        case 123:
            return jjStopAtPos(0, 41);
        case 124:
            jjmatchedKind = 58;
            return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
        case 125:
            return jjStopAtPos(0, 43);
        case 126:
            return jjStopAtPos(0, 76);
        default:
            return jjMoveNfa_0(0, 0);
        }
    }
    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
        case 38:
            if ((active1 & 0x1L) != 0L)
                return jjStopAtPos(1, 64);
            break;
        case 60:
            if ((active0 & 0x1000000000000000L) != 0L)
                return jjStopAtPos(1, 60);
            break;
        case 61:
            if ((active0 & 0x10000000000000L) != 0L)
                return jjStopAtPos(1, 52);
            else if ((active0 & 0x40000000000000L) != 0L)
                return jjStopAtPos(1, 54);
            else if ((active0 & 0x80000000000000L) != 0L)
                return jjStopAtPos(1, 55);
            else if ((active0 & 0x100000000000000L) != 0L)
                return jjStopAtPos(1, 56);
            break;
        case 62:
            if ((active0 & 0x2000000000000000L) != 0L) {
                jjmatchedKind = 61;
                jjmatchedPos = 1;
            } else if ((active1 & 0x800L) != 0L)
                return jjStopAtPos(1, 75);
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
        case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0xb000000L, active1, 0L);
        case 101:
            return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
        case 102:
            if ((active0 & 0x20000L) != 0L)
                return jjStartNfaWithStates_0(1, 17, 50);
            break;
        case 104:
            return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
        case 108:
            return jjMoveStringLiteralDfa2_0(active0, 0xc0000L, active1, 0L);
        case 110:
            return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
        case 112:
            return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
        case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
        case 120:
            return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
        case 124:
            if ((active0 & 0x8000000000000000L) != 0L)
                return jjStopAtPos(1, 63);
            break;
        default:
            break;
        }
        return jjStartNfa_0(0, active0, active1);
    }
    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, 0L);
            return 2;
        }
        switch (curChar) {
        case 62:
            if ((active0 & 0x4000000000000000L) != 0L)
                return jjStopAtPos(2, 62);
            break;
        case 100:
            if ((active0 & 0x100000L) != 0L)
                return jjStartNfaWithStates_0(2, 20, 50);
            break;
        case 105:
            return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
        case 108:
            return jjMoveStringLiteralDfa3_0(active0, 0x18000000L);
        case 109:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
        case 114:
            if ((active0 & 0x1000000L) != 0L)
                return jjStartNfaWithStates_0(2, 24, 50);
            return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
        case 115:
            return jjMoveStringLiteralDfa3_0(active0, 0xc0000L);
        case 116:
            return jjMoveStringLiteralDfa3_0(active0, 0x20200000L);
        case 117:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
        default:
            break;
        }
        return jjStartNfa_0(1, active0, 0L);
    }
    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, 0L);
            return 3;
        }
        switch (curChar) {
        case 98:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
        case 101:
            if ((active0 & 0x80000L) != 0L) {
                jjmatchedKind = 19;
                jjmatchedPos = 3;
            } else if ((active0 & 0x4000000L) != 0L)
                return jjStartNfaWithStates_0(3, 26, 50);
            return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
        case 105:
            return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
        case 108:
            if ((active0 & 0x10000000L) != 0L)
                return jjStartNfaWithStates_0(3, 28, 50);
            break;
        case 111:
            return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
        case 115:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
        case 116:
            if ((active0 & 0x800000L) != 0L)
                return jjStartNfaWithStates_0(3, 23, 50);
            break;
        case 117:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
        default:
            break;
        }
        return jjStartNfa_0(2, active0, 0L);
    }
    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (curChar) {
        case 100:
            return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
        case 101:
            if ((active0 & 0x8000000L) != 0L)
                return jjStartNfaWithStates_0(4, 27, 50);
            break;
        case 105:
            return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
        case 111:
            return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
        case 114:
            return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
        case 119:
            if ((active0 & 0x400000L) != 0L)
                return jjStartNfaWithStates_0(4, 22, 50);
            break;
        default:
            break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }
    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (curChar) {
        case 97:
            if ((active0 & 0x2000000L) != 0L)
                return jjStartNfaWithStates_0(5, 25, 50);
            break;
        case 102:
            if ((active0 & 0x40000L) != 0L)
                return jjStartNfaWithStates_0(5, 18, 50);
            break;
        case 110:
            if ((active0 & 0x200000L) != 0L)
                return jjStartNfaWithStates_0(5, 21, 50);
            else if ((active0 & 0x20000000L) != 0L)
                return jjStartNfaWithStates_0(5, 29, 50);
            break;
        default:
            break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }
    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0  = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec2  = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec3  = { 0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x1600000000000000L };
    static final long[] jjbitVec4  = { 0x0L, 0x0L, 0xc603c0000000000L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec5  = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec6  = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
    static final long[] jjbitVec7  = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
    static final long[] jjbitVec8  = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec9  = { 0x7f7ffdff80f8007fL, 0xffffffffffffffdbL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec10 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fff000000ffffffL };
    static final long[] jjbitVec11 = { 0x0L, 0xffff000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL };
    static final long[] jjbitVec12 = { 0x87ffffff80000000L, 0xfffffffe7fffffffL, 0x7fffffffffffffffL, 0x1cfcfcfcL };
    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 49;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 12)
                                kind = 12;
                            {
                                jjCheckNAddStates(0, 3);
                            }
                        } else if ((0x7800000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 2;
                        else if ((0x3400L & l) != 0L) {
                            if (kind > 8)
                                kind = 8;
                        } else if ((0x280000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(34, 35);
                        } else if (curChar == 47) {
                            jjAddStates(4, 5);
                        } else if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 15;
                        else if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 13;
                        if (curChar == 48) {
                            jjAddStates(6, 8);
                        } else if (curChar == 36) {
                            if (kind > 74)
                                kind = 74;
                            {
                                jjCheckNAddStates(9, 11);
                            }
                        } else if (curChar == 39) {
                            jjCheckNAddStates(12, 14);
                        } else if (curChar == 34) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 26:
                        if (curChar == 42) {
                            jjCheckNAddTwoStates(30, 32);
                        } else if (curChar == 47) {
                            jjCheckNAddTwoStates(27, 28);
                        }
                        break;
                    case 50:
                        if ((0x3ff001000000000L & l) != 0L) {
                            if (kind > 74)
                                kind = 74;
                            {
                                jjCheckNAddStates(9, 11);
                            }
                        } else if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 20;
                        break;
                    case 13:
                        if ((0xfffffffbffffc9ffL & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        } else if (curChar == 34) {
                            if (kind > 71)
                                kind = 71;
                        }
                        if (curChar == 34) {
                            if (kind > 68)
                                kind = 68;
                        }
                        break;
                    case 15:
                        if ((0xffffff7fffffc9ffL & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        } else if (curChar == 39) {
                            if (kind > 71)
                                kind = 71;
                        }
                        if (curChar == 39) {
                            if (kind > 70)
                                kind = 70;
                        }
                        break;
                    case 49:
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 16)
                                kind = 16;
                            {
                                jjCheckNAddStates(18, 20);
                            }
                        }
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 12)
                                kind = 12;
                            {
                                jjCheckNAdd(34);
                            }
                        }
                        break;
                    case 1:
                        if ((0x7800000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 2;
                        break;
                    case 3:
                        if (curChar == 34) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 4:
                        if ((0xfffffffbffffc9ffL & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 6:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 7:
                        if (curChar == 34 && kind > 68)
                            kind = 68;
                        break;
                    case 8:
                        if (curChar == 39) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 9:
                        if ((0xffffff7fffffc9ffL & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 11:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 12:
                        if (curChar == 39 && kind > 70)
                            kind = 70;
                        break;
                    case 14:
                        if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 13;
                        break;
                    case 16:
                        if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 15;
                        break;
                    case 17:
                        if (curChar != 36)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 18:
                        if ((0x3ff001000000000L & l) == 0L)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 19:
                        if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 20;
                        break;
                    case 20:
                        if (curChar != 36)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(21, 23);
                    }
                    break;
                    case 21:
                        if ((0x3ff001000000000L & l) == 0L)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(21, 23);
                    }
                    break;
                    case 23:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjAddStates(24, 25);
                        }
                        break;
                    case 25:
                        if (curChar == 47) {
                            jjAddStates(4, 5);
                        }
                        break;
                    case 27:
                        if ((0xffffffffffffcbffL & l) != 0L) {
                            jjCheckNAddTwoStates(27, 28);
                        }
                        break;
                    case 28:
                        if ((0x3400L & l) != 0L && kind > 6)
                            kind = 6;
                        break;
                    case 29:
                        if (curChar == 42) {
                            jjCheckNAddTwoStates(30, 32);
                        }
                        break;
                    case 30: {
                        jjCheckNAddTwoStates(30, 32);
                    }
                    break;
                    case 31:
                        if (curChar == 47 && kind > 7)
                            kind = 7;
                        break;
                    case 32:
                        if (curChar == 42)
                            jjstateSet[jjnewStateCnt++] = 31;
                        break;
                    case 33:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(34, 35);
                        }
                        break;
                    case 34:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 12)
                            kind = 12;
                    {
                        jjCheckNAdd(34);
                    }
                    break;
                    case 35:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 16)
                            kind = 16;
                    {
                        jjCheckNAddStates(18, 20);
                    }
                    break;
                    case 36:
                        if (curChar != 46)
                            break;
                        if (kind > 16)
                            kind = 16;
                    {
                        jjCheckNAddTwoStates(37, 38);
                    }
                    break;
                    case 37:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 16)
                            kind = 16;
                    {
                        jjCheckNAddTwoStates(37, 38);
                    }
                    break;
                    case 39:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(40);
                        }
                        break;
                    case 40:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 16)
                            kind = 16;
                    {
                        jjCheckNAdd(40);
                    }
                    break;
                    case 41:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 12)
                            kind = 12;
                    {
                        jjCheckNAddStates(0, 3);
                    }
                    break;
                    case 42:
                        if (curChar == 48) {
                            jjAddStates(6, 8);
                        }
                        break;
                    case 44:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 13)
                            kind = 13;
                        jjstateSet[jjnewStateCnt++] = 44;
                        break;
                    case 46:
                        if ((0xff000000000000L & l) == 0L)
                            break;
                        if (kind > 14)
                            kind = 14;
                        jjstateSet[jjnewStateCnt++] = 46;
                        break;
                    case 48:
                        if ((0xff000000000000L & l) == 0L)
                            break;
                        if (kind > 15)
                            kind = 15;
                        jjstateSet[jjnewStateCnt++] = 48;
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 74)
                                kind = 74;
                            {
                                jjCheckNAddStates(9, 11);
                            }
                        } else if (curChar == 64)
                            jjstateSet[jjnewStateCnt++] = 2;
                        break;
                    case 50:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 74)
                                kind = 74;
                            {
                                jjCheckNAddStates(9, 11);
                            }
                        } else if (curChar == 91)
                            jjstateSet[jjnewStateCnt++] = 23;
                        break;
                    case 13:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        } else if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 6;
                        break;
                    case 15:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        } else if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 1:
                        if (curChar == 64)
                            jjstateSet[jjnewStateCnt++] = 2;
                        break;
                    case 2:
                        if (curChar == 123 && kind > 42)
                            kind = 42;
                        break;
                    case 4:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 5:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 6;
                        break;
                    case 6:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 9:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 10:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 11:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 17:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 18:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 20:
                    case 21:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(21, 23);
                    }
                    break;
                    case 22:
                        if (curChar == 91)
                            jjstateSet[jjnewStateCnt++] = 23;
                        break;
                    case 24:
                        if (curChar != 93)
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddTwoStates(19, 22);
                    }
                    break;
                    case 27: {
                        jjAddStates(26, 27);
                    }
                    break;
                    case 30: {
                        jjAddStates(28, 29);
                    }
                    break;
                    case 38:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(30, 31);
                        }
                        break;
                    case 43:
                        if ((0x100000001000000L & l) != 0L) {
                            jjCheckNAdd(44);
                        }
                        break;
                    case 44:
                        if ((0x7e0000007eL & l) == 0L)
                            break;
                        if (kind > 13)
                            kind = 13;
                    {
                        jjCheckNAdd(44);
                    }
                    break;
                    case 45:
                        if ((0x800000008000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 46;
                        break;
                    case 47:
                        if ((0x400000004L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 48;
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 50:
                    case 18:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(9, 11);
                    }
                    break;
                    case 13:
                    case 4:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(15, 17);
                        }
                        break;
                    case 15:
                    case 9:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(12, 14);
                        }
                        break;
                    case 20:
                    case 21:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 74)
                            kind = 74;
                    {
                        jjCheckNAddStates(21, 23);
                    }
                    break;
                    case 27:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(26, 27);
                        }
                        break;
                    case 30:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(28, 29);
                        }
                        break;
                    default:
                        if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0)
                            break;
                        else
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }
    static final int[] jjnextStates = { 34, 35, 36, 38, 26, 29, 43, 45, 47, 18, 19, 22, 9, 10, 12, 4, 5, 7, 35, 36, 38, 19, 21, 22, 23, 24, 27, 28, 30, 32, 39, 40, };
    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec2[i2] & l2) != 0L);
        default:
            if ((jjbitVec0[i1] & l1) != 0L)
                return true;
            return false;
        }
    }
    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec4[i2] & l2) != 0L);
        case 48:
            return ((jjbitVec5[i2] & l2) != 0L);
        case 49:
            return ((jjbitVec6[i2] & l2) != 0L);
        case 51:
            return ((jjbitVec7[i2] & l2) != 0L);
        case 61:
            return ((jjbitVec8[i2] & l2) != 0L);
        case 251:
            return ((jjbitVec9[i2] & l2) != 0L);
        case 253:
            return ((jjbitVec10[i2] & l2) != 0L);
        case 254:
            return ((jjbitVec11[i2] & l2) != 0L);
        case 255:
            return ((jjbitVec12[i2] & l2) != 0L);
        default:
            if ((jjbitVec3[i1] & l1) != 0L)
                return true;
            return false;
        }
    }
    /** Token literal values. */
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "\151\146", "\145\154\163\145\151\146", "\145\154\163\145", "\145\156\144", "\162\145\164\165\162\156", "\164\150\162\157\167", "\145\170\151\164", "\166\141\162", "\154\141\155\142\144\141", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", "\157\160\164\151\157\156", "\54", "\72", "\77", "\73", "\75", "\47", "\42", "\50", "\51", "\133", "\135", "\173", null, "\175", "\41", "\53", "\55", "\52", "\57", "\45", "\134", "\76",
            "\76\75", "\74", "\74\75", "\75\75", "\41\75", "\46", "\174", "\136", "\74\74", "\76\76", "\76\76\76", "\174\174", "\46\46", null, null, null, null, null, null, null, null, null, null, "\55\76", "\176", };
    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);
        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;
        return t;
    }
    int curLexState     = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;
    /** Get the next Token. */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;
        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                } else {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (specialToken == null)
                            specialToken = matchedToken;
                        else {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }
    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }
    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }
    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }
    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }
    /** Constructor. */
    public DataQLParserTokenManager(JavaCharStream stream) {
        if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }
    /** Constructor. */
    public DataQLParserTokenManager(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }
    /** Reinitialise parser. */
    public void ReInit(JavaCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }
    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 49; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }
    /** Reinitialise parser. */
    public void ReInit(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }
    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }
    /** Lexer state names. */
    public static final String[] lexStateNames = { "DEFAULT", };
    static final        long[]   jjtoToken     = { 0xfffffffffffff001L, 0x1cd1L, };
    static final        long[]   jjtoSkip      = { 0x1feL, 0x0L, };
    static final        long[]   jjtoSpecial   = { 0x1c0L, 0x0L, };
    protected JavaCharStream input_stream;
    private final int[] jjrounds   = new int[49];
    private final int[] jjstateSet = new int[2 * 49];
    protected char curChar;
}
